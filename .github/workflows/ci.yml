name: CI

on:
  push:
    branches: [ main ]
    tags-ignore: [ '**' ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Setup Git
      run: git config --global core.autocrlf false

    - uses: actions/checkout@v4

    - name: Install platyPS
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name platyPS -Scope CurrentUser

    - name: Prepare Dependencies
      run: |
        $LOCALPKG = $(Join-Path ${env:TEMP} $(New-Guid))
        mkdir "${LOCALPKG}"
        curl.exe -sSLO --output-dir "${LOCALPKG}" https://github.com/9506hqwy/xdr-net/releases/download/0.4.0/Xdr.0.4.0.nupkg
        curl.exe -sSLO --output-dir "${LOCALPKG}" https://github.com/9506hqwy/libvirt-schema-net/releases/download/11.1.0/LibvirtModel.11.1.0.nupkg
        curl.exe -sSLO --output-dir "${LOCALPKG}" https://github.com/9506hqwy/libvirt-remote-net/releases/download/11.1.0/LibvirtRemote.11.1.0.nupkg
        curl.exe -sSLO --output-dir "${LOCALPKG}" https://github.com/9506hqwy/libvirt-header-net/releases/download/11.1.0/LibvirtHeader.11.1.0.nupkg
        dotnet nuget add source --name local "${LOCALPKG}"

    - name: Restore Dependencies
      run: dotnet restore pwsh-virt.sln

    - name: Build Debug
      run: dotnet build pwsh-virt.sln --no-restore

    - name: Check Format
      run: dotnet format pwsh-virt.sln --no-restore --verify-no-changes

    - name: Run Tests
      run: dotnet test pwsh-virt.sln --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory .\coverage

    - name: Create Artifacts
      run: dotnet msbuild release.proj

    - name: Generate Coverage Report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:".\coverage\*\coverage.cobertura.xml" -targetdir:".\artifacts" -reporttypes:"MarkdownSummaryGithub;TextSummary"

        reportgenerator -reports:".\coverage\*\coverage.cobertura.xml" -targetdir:".\coverage_html" -reporttypes:"Html"
        Compress-Archive -Path '.\coverage_html\*' -DestinationPath ".\artifacts\coverage.zip"

    - name: Report Coverage
      run: |
        cat ".\artifacts\Summary.txt"
        cat ".\artifacts\SummaryGithub.md" > "${env:GITHUB_STEP_SUMMARY}"

    - name: Publish Artifacts
      run: |
        dotnet tool install -g docfx
        docfx doc\docfx.json

        $CUR_DIR = $(pwd)
        $REPOSITORY_NAME = ${env:GITHUB_REPOSITORY}.replace("${env:GITHUB_REPOSITORY_OWNER}/", "")
        Compress-Archive -Path '.\doc\_site\*' -DestinationPath "${CUR_DIR}\artifacts\help-${REPOSITORY_NAME}.zip"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ runner.os }}-${{ runner.arch }}-${{ github.run_number }}
        path: artifacts/
        retention-days: 1
